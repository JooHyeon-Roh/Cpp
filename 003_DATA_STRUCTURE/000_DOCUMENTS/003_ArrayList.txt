1. 정의 및 특징
	- Array 와 같음
	
2. 추상 자료형(ADT)
	- Object
		ArrayList
			<i∈Index, value∈arr> 쌍들의 집합. index는 순서를 나타내는 정수의 유한집합, Element는 자료형이 같은 요소의 집합
			<maxIndex∈size> 집합의 최대 크기
	- Function
		arr∈Array; i∈Index; x, value∈arr, size∈Integer에 대해 아래와 같은 연산이 정의 된다.
		arr는 0개 이상의 요소를 갖는 배열, item 은 배열에 저장된 요소, size은 배열의 최대 크기
		
	- 추상 자료형 정의
		= bool IsEmpty(ArrayList* list) ::= 배열이 비어있는지 체크. 비어있으면 false 반환. 비어있지 않으면 
			if(list->size > 0)
			{
				return false;
			}
			else
			{
				return true;
			}
			
		= IsFull(ArrayList* list) ::= 배열이 가득 차있는지 체크
			if(list->size > MAX_SIZE)
			{
				return false;
			}
			else
			{
				return true;
			}
		
		= PrintList(ArrayList* list) ::= 배열의 요소들을 출력
		= GetValue(ArrayList* list, int pos) ::= pos 에 위치한 값을 출력
		= GetSize(ArrayList* list) ::= 데이터가 존재하는 배열의 크기를 출력
		= ListValueMove(ArrayList* list, int pos, IncDec incDec) ::= 배열에 추가, 삭제시 기존의 데이터를 앞 또는 뒤로 옮김
		= InsertFirst(ArrayList * list, int value) ::= 배열의 제일 처음에 데이터를 추가
		= Insert(ArrayList* list, int pos, int value) ::= pos 위치에 데이터를 추가
		= InsertLast(ArrayList* list, int value) ::= 배열의 마지막에 데이터를 추가
		= Delete(ArrayList* list, int pos) ::= 배열의 pos 에 데이터를 삭제
		
	
3. 시간 복잡도(Time Complexity)
	- 삽입/삭제
		= 배열의 맨 앞에 삽입/삭제하는 경우 : Insert/Remove(n + 1) = Big-O Notation = O(n + 1)
		= 배열의 맨 뒤에 삽입/삭제하는 경우 : Insert/Remove(1) = Big-O Notation = O(1)
		= 배열의 중간에 삽입/삭제하는 경우 : Insert/Remove(n - pos) = Big-O Notation = O(n - pos)
		
	- 탐색
		= Retrieve(1) = Big-O Notation = O(1)
		
4. 장점
5. 단점
	- 배열과 같음



