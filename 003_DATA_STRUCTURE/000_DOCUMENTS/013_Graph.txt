https://gmlwjd9405.github.io/2018/08/13/data-structure-graph.html
https://coding-factory.tistory.com/610
https://medium.com/@gwakhyoeun/til-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-graph-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-6f92fd87a0bd
https://www.zerocho.com/category/Algorithm/post/584b9033580277001862f16c
https://kosaf04pyh.tistory.com/131
https://m.blog.naver.com/PostView.nhn?blogId=kbs4674&logNo=220727852469&proxyReferer=https:%2F%2Fwww.google.com%2F
https://velog.io/@gimtommang11/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EA%B7%B8%EB%9E%98%ED%94%84
https://hsc-tech.tistory.com/12
http://dblab.duksung.ac.kr/ds/pdf/Chap10.pdf
http://dawoonjeong.com/datastructure-non-linear-graph/

1. 정의 및 특징
	- 단순히 노드(N, node)와 그 노드를 연결하는 간선(E, edge)을 하나로 모아 놓은 자료 구조
	- 즉, 연결되어 있는 객체 간의 관계를 표현할 수 있는 자료 구조이다.
		= Ex) 지도, 지하철 노선도의 최단 경로, 전기 회로의 소자들, 도로(교차점과 일방 통행길), 선수 과목 등
	- 그래프는 여러 개의 고립된 부분 그래프(Isolated Subgraphs)로 구성될 수 있다.
	
	- 그래프(Graph)와 관련된 용어
		= 정점(vertex): 위치라는 개념. (node 라고도 부름)
		= 간선(edge): 위치 간의 관계. 즉, 노드를 연결하는 선 (link, branch 라고도 부름)
		= 인접 정점(adjacent vertex): 간선에 의 해 직접 연결된 정점
		= 정점의 차수(degree): 무방향 그래프에서 하나의 정점에 인접한 정점의 수
		= 무방향 그래프에 존재하는 정점의 모든 차수의 합 = 그래프의 간선 수의 2배
		= 진입 차수(in-degree): 방향 그래프에서 외부에서 오는 간선의 수 (내차수 라고도 부름)
		= 진출 차수(out-degree): 방향 그래픙에서 외부로 향하는 간선의 수 (외차수 라고도 부름)
		= 방향 그래프에 있는 정점의 진입 차수 또는 진출 차수의 합 = 방향 그래프의 간선의 수(내차수 + 외차수)
		= 경로 길이(path length): 경로를 구성하는 데 사용된 간선의 수
		= 단순 경로(simple path): 경로 중에서 반복되는 정점이 없는 경우
		= 사이클(cycle): 단순 경로의 시작 정점과 종료 정점이 동일한 경우
		
	- 그래프(Graph)의 특징
		= 그래프는 네트워크 모델 이다.
		= 2개 이상의 경로가 가능하다.
			- 즉, 노드들 사이에 무방향/방향에서 양방향 경로를 가질 수 있다.
		= self-loop 뿐 아니라 loop/circuit 모두 가능하다.
		= 루트 노드라는 개념이 없다.
		= 부모-자식 관계라는 개념이 없다.
		= 순회는 DFS나 BFS로 이루어진다.
		= 그래프는 순환(Cyclic) 혹은 비순환(Acyclic)이다.
		= 그래프는 크게 방향 그래프와 무방향 그래프가 있다.
		= 간선의 유무는 그래프에 따라 다르다
		
2. 그래프(Graph)의 종류
	- 무방향 그래프(Undirected Graph)
		= 무방향 그래프의 간선은 간선을 통해서 양 방향으로 갈 수 있다.
		= 정점 A와 정점 B를 연결하는 간선은 (A, B)와 같이 정점의 쌍으로 표현한다.
			- (A, B)는 (B, A) 동일
		= Ex) 양방향 통행 도로
		
	- 방향 그래프(Directed Graph)
		= 간선에 방향성이 존재하는 그래프
		= A -> B로만 갈 수 있는 간선은 <A, B>로 표시한다.
			- <A, B>는 <B, A>는 다름
		= Ex) 일방 통행
		
	- 가중치 그래프(Weighted Graph)
		= 간선에 비용이나 가중치가 할당된 그래프
		= ‘네트워크(Network)’ 라고도 한다.
			- Ex) 도시-도시의 연결, 도로의 길이, 회로 소자의 용량, 통신망의 사용료 등

	- 연결 그래프(Connected Graph)
		= 무방향 그래프에 있는 모든 정점쌍에 대해서 항상 경로가 존재하는 경우
		= Ex) 트리(Tree): 사이클을 가지지 않는 연결 그래프
		
	- 비연결 그래프(Disconnected Graph)
		= 무방향 그래프에서 특정 정점쌍 사이에 경로가 존재하지 않는 경우
		
	- 사이클(Cycle)
		= 단순 경로의 시작 정점과 종료 정점이 동일한 경우
			- 단순 경로(Simple Path): 경로 중에서 반복되는 정점이 없는 경우
			
	- 비순환 그래프(Acyclic Graph)
		= 사이클이 없는 그래프
		
	- 완전 그래프(Complete Graph)
		= 그래프에 속해 있는 모든 정점이 서로 연결되어 있는 그래프
		= 무방향 완전 그래프
			- 정점 수: n이면 간선의 수: n * (n-1) / 2
	
3. 구현방법
	- 인접 리스트(Adjacency List)
		= 인접 리스트(Adjacency List)로 그래프를 표현하는 것이 가장 일반적인 방법 이다.
			- 모든 정점(혹은 노드)을 인접 리스트에 저장한다. 즉, 각각의 정점에 인접한 정점들을 리스트로 표시한 것이다.
				= 배열(혹은 해시테이블)과 배열의 각 인덱스마다 존재하는 또 다른 리스트(배열, 동적 가변 크기 배열(ArrayList), 연결리스트(LinkedList) 등)를 이용해서 인접 리스트를 표현
				= 정점의 번호만 알면 이 번호를 배열의 인덱스로 하여 각 정점의 리스트에 쉽게 접근할 수 있다.
			- 무방향 그래프(Undirected Graph)에서 (a, b) 간선은 두 번 저장된다.
				= 한 번은 a 정점에 인접한 간선을 저장하고 다른 한 번은 b에 인접한 간선을 저장한다.
				= 정점의 수: N, 간선의 수: E인 무방향 그래프의 경우
					- N개의 리스트, N개의 배열, 2E개의 노드가 필요
			- 트리에선 특정 노드 하나(루트 노드)에서 다른 모든 노드로 접근이 가능 -> Tree 클래스 불필요
				= 그래프에선 특정 노드에서 다른 모든 노드로 접근이 가능하지는 않음 -> Graph 클래스 필요
				
		= 장점
			- 메모리 효율이 좋다.
				= 메모리 사용량은 노드 수가 아닌 간선 수에 따라 달라진다.
			- 특정 노드에 직접 접근할 수 있어 인접한 노드를 찾기 쉽다.
			- 노드의 추가 삭제가 빠르다.
			- 새로운 간선을 빠르게 추가 할 수 있다. O(1)
			- 그래프의 모든 간선의 수를 찾는데 O(N+E)
		
		= 단점
			- 두 노드의 간선 정보를 확인하는데 오래걸린다.
			
	- 인접 행렬(Adjacency Matrix)
		= 인접 행렬은 NxN 불린 행렬(Boolean Matrix)로써 matrix[i][j]가 true라면 i -> j로의 간선이 있다는 뜻이다.
			- 0과 1을 이용한 정수 행렬(Integer Matrix)을 사용할 수도 있다.
			- 정점(노드)의 개수가 N인 그래프를 인접 행렬로 표현
				= 간선의 수와 무관하게 항상 n^2개의 메모리 공간이 필요하다.
			- 무방향 그래프를 인접 행렬로 표현한다면 이 행렬은 대칭 행렬(Symmetric Matrix)이 된다.
				= 물론 방향 그래프는 대칭 행렬이 안 될 수도 있다.
			- 인접 리스트를 사용한 그래프 알고리즘들(Ex. 너비 우선 탐색) 또한 인접 행렬에서도 사용이 가능하다.
				= 하지만 인접 행렬은 조금 효율성이 떨어진다.
				= 인접 리스트는 어떤 노드에 인접한 노드들을 쉽게 찾을 수 있지만 인접 행렬에서는 인접한 노드를 찾기 위해서는 모든 노드를 전부 순회해야 한다.
				
		= 장점
			- 두 노드의 간선 정보를 확인하는것이 빠르다. O(1)
			- 새로운 간선을 추가하고 제거하는것이 빠르다. O(1)
			
		= 단점
			- 간선의 개수와 상관없이 배열의 크기는 항상 N * N 개이다. (N은 노드의 개수)
				= O(N^2) 의 메모리를 사용
			- 특정한 노드에 인접한 노드를 찾기위해서 모든 노드를 순회해야 한다.
			- 노드를 추가 하거나 제거하는데 오래 걸린다. O(N^2)
			- 그래프의 모든 간선의 수를 찾는데 O(N^2)
			- 인접 행렬은 상대적으로 노드의 개수가 적고 간선의 수가 많을때 사용하는것이 좋다고 할 수 있다.
			- 따라서 간선이 많은 밀집 그래프(Dense Graph)에 적합하다.
	
	- 인접 리스트와 인접 행렬 중 선택 방법
		= 인접 리스트
			- 그래프 내에 적은 숫자의 간선만을 가지는 희소 그래프(Sparse Graph) 의 경우
			- 장점
				= 어떤 노드에 인접한 노드들 을 쉽게 찾을 수 있다.
				= 그래프에 존재하는 모든 간선의 수 는 O(N+E) 안에 알 수 있다. : 인접 리스트 전체를 조사한다.
			- 단점
				= 간선의 존재 여부와 정점의 차수: 정점 i의 리스트에 있는 노드의 수 즉, 정점 차수만큼의 시간이 필요
		= 인접 행렬
			- 그래프에 간선이 많이 존재하는 밀집 그래프(Dense Graph) 의 경우
			- 장점
				= 두 정점을 연결하는 간선의 존재 여부 (M[i][j])를 O(1) 안에 즉시 알 수 있다.
				= 정점의 차수 는 O(N) 안에 알 수 있다. : 인접 배열의 i번 째 행 또는 열을 모두 더한다.
			- 단점
				= 어떤 노드에 인접한 노드들을 찾기 위해서는 모든 노드를 전부 순회해야 한다.
				= 그래프에 존재하는 모든 간선의 수는 O(N^2) 안에 알 수 있다. : 인접 행렬 전체를 조사한다.
				
4. 그래프(Graph)의 탐색
	- 깊이 우선 탐색(DFS, Depth-First Search)
		= 루트 노드(혹은 다른 임의의 노드)에서 시작해서 다음 분기(branch)로 넘어가기 전에 해당 분기를 완벽하게 탐색하는 방법
			- 즉, 넓게(wide) 탐색하기 전에 깊게(deep) 탐색하는 것이다.
			- 사용하는 경우: 모든 노드를 방문 하고자 하는 경우에 이 방법을 선택한다.
			- 깊이 우선 탐색이 너비 우선 탐색보다 좀 더 간단하다
			
	- 너비 우선 탐색(BFS, Breadth-First Search)
		= 루트 노드(혹은 다른 임의의 노드)에서 시작해서 인접한 노드를 먼저 탐색하는 방법
			- 즉, 깊게(deep) 탐색하기 전에 넓게(wide) 탐색하는 것이다.
			- 사용하는 경우: 두 노드 사이의 최단 경로 혹은 임의의 경로를 찾고 싶을 때 이 방법을 선택한다.
				= Ex) 지구상에 존재하는 모든 친구 관계를 그래프로 표현한 후 Ash와 Vanessa 사이에 존재하는 경로를 찾는 경우
				= 깊이 우선 탐색의 경우 - 모든 친구 관계를 다 살펴봐야 할지도 모른다.
				= 너비 우선 탐색의 경우 - Ash와 가까운 관계부터 탐색

