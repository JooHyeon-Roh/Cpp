1. 자료구조란 무엇인가?
	1-1. 자료구조란 자료(데이터)에 대한 처리를 효율적으로 수행할 수 있도록 조직적, 체계적으로 관리하는 방법.
	1-2. 자료구조는 실행시간 혹은 메모리 용량과 같은 자원을 최소한으로 사용하면서 연산을 수행하도록 해준다.
	1-3. 자료구조는 언어별 지원이 다르기 때문에 각각 언어별 사용방법도 중요하지만 각 자료구조의 모델 자체를 이해하는 것이 중요하다.
	1-4. 궁극적인 목표는 각 언어별 자료구조를 사용하는 것은 검증된 라이브러리를 사용하는 것이 좋지만, 라이브러리를 잘 가져다 쓰기 위한 자료구조의 특성을 정확하게 파악해야 한다.

2. 자료구조의 분류
﻿	2-1. 자료구조분류.drawio 참조

3. 자료구조의 선택 기준
	3-1. 자료의 처리시간
	3-2. 자료의 크기
	3-3. 자료의 활용빈도
	3-4. 자료의 갱신정도
	3-5. 프로그램의 용이성
	
4. 자료구조의 특징
	4-1. 효율성
		- 앞서 설명 했듯이 자료구조를 사용하는 목적은 효율적인 데이터의 관리 및 사용입니다. 따라서 적절한 자료구조를 선택하여 사용한다면 업무의 효율이 올라갈 것입니다.
		- 목적에 맞는 자료구조를 사용하는것이 효율적입니다.

		
	4-2. 추상화
		- 추상화란 복잡한 자료, 모듈, 시스템 등으로 부터 핵심적인 개념만 간추려 내는 것입니다. 
		- 자료구조를 구현할 때 중요한 것은 어느 시점에 데이터를 삽입할 것이며, 어느 시점에 이러한 데이터를 어떻게 사용할것인지에 대해서 초점을 맞출수 있기 때문에 구현 외적인 부분에 더 시간을 쏟을 수 있습니다. 
		- 알고리즘 자체에는 중점을 두지 않습니다.
		- 마찬가지로 자료구조 내부의 구현은 중요하지 않습니다. 어떻게 구현했는지 보다 어떻게 사용해야 하는지를 알고 있어야 합니다.

		
	4-3. 재사용성
		- 자료구조를 설계할때 특정 프로그램에서만 동작하게 설계하지는 않습니다.
		- 다양한 프로그램에서 동작할 수 있도록 범용성 있게 설계하기 때문에 해당 프로젝트가 아닌 다른 프로젝트에서도 사용할 수 있습니다.
		


5. ADT : 추상 자료형(Abstract Data Type)
	- '구체적인 기능의 완성을 업급하지 않고, 순수하게 기능이 무엇인지를 나열한 것'을 말한다.
	
	5-1. ADT는 두 부분으로 구성된다.
		- 데이터의 선언
		- 연산의 선언
	
	5-2 추상자료형의 예를 설명해주면 좋음. (계산기, 화폐, 물품 등등)
	
		ex) 화폐 단위가 1000원과 5000원이 있다고 가정.
			지갑을 이용한 추상 자료형 정의를 하면
		
			- 데이터의 선언
				int 1000won;
				int 5000won;
			
			- 연산의 선언
				int GetTotal();
				void Payment();
			

6. 복잡도 (복잡도.drawio 참조)
	6-1. 시간 복잡도(Time Complexity)
		- 알고리즘의 수행시간 분석 결과
				
	6-2. 공간 복잡도(Space Complexity)
		- 알고리즘의 메모리 사용량 분석 결과
		
	6-3 Big-O Notation (빅 오 표기법, Big-O 표기법)
		= Big-O Notation이라는 것을 사용한다. 알고리즘의 최악의 경우의 수를 O( ) 에 넣어준다고 생각하면 된다.
		= 입력 n 에 따라 결정되는 시간 복잡도 함수
		= O(1), O(logn), O(n), O(nlogn), O(n2), O(2n), O(n!)등으로 표기함
		= 입력 n 의 크기에 따라 기하급수적으로 시간 복잡도가 늘어날 수 있음
			* O(1) < O(logn) < O(n) < O(nlogn) < O(n2) < O(2n) < O(n!)
			
			
		ex) 
		
		1. 
			n += 1;
			
			n *= 2;
			
			시간 복잡도는 O(1), 공간 복잡도 O(1)
			
		2.
		
			int n = 100;
			for(int i = 0; i < n; ++i){
				n += 1;
			}
			
			시간 복잡도는 O(n), 공간 복잡도 O(1), 반복문 안의 코드는 O(1)라고 가정
			
		3.
			
			for(int i = 0; i < n; ++i){
				for(int j = 0; j < n; ++j){
					n += 1;
				}
			}
			
			시간 복잡도는 O(n²), 공간 복잡도 O(1), 반복문 안의 코드는 O(1)라고 가정
		
		4. 
			int MAX_SIZE = 100;
			list[]; // 배열
			
			for(int i = 0; i < MAX_SIZE; ++i)
			{
				int n += list[i];
			}
			
			시간 복잡도는 O(n), 공간 복잡도 O(MAX_SIZE), 반복문 안의 코드는 O(1)라고 가정
		
		
		

