/*
CreateMaze 는 방 사이에 문이 있는 두 개의 방으로 구성된 미로를 만듭니다.

문제는 코드의 유연성이 떨어진다는 것입니다. 생성패턴은 이런 상황에서 어떻게 유연한 설계를 할 수 있는 지에 대한 해법을 제공합니다.
특히 미로의 구성요소를 정의하는 클래스를 쉽게 변경할 수 있는 방법을 제공합니다

기존 미로가 갖고 있는 레이아웃을 재사용하면서 마법 주문이 걸린 미로가 있는 게임을 만들고 싶다고 가정해 봅시다.
이 마법의 미로 게임을 만들기 위해서는 단어를 맞추면 문이 열리는 DoorNeedingSpell이라든지, 마법 키나 단어 등 특별한 항목을 포함하는 EnchantedRoom과
같은 새로운 구성요소가 필요합니다.

지금 시점에서 가장 큰 장애 요인은 클래스들의 인스턴스를 직접 생성하도록 하드 코딩한다는 점입니다. 생성 패턴은 이런 어려움을 이길 수 있는 여러가지 방법을 제공합니다.

	- CreateMaze가 방, 벽, 문을 생성하기 위해서 생성자를 이용하지 않고 가상함수를 호출하도록 구현되어 있다면, 이 가상 함수의 실제 구현을 다양한 방법으로
	변경할 수 있을 것입니다. 이 방법은 팩토리 메서드 패턴의 한 예입니다.

	- CreateMaze가 방, 벽, 문을 생성하기 위해 생성 방법을 알고 있는 객체를 매개변수로 넘겨받을 수 있다면,
	생성 방법이 바뀔 때마다 새로운 매개 변수를 넘겨받음으로써 생성할 객체의 유형을 달리할 수 있습니다. 이는 추상 팩토리 패턴의 예입니다.

	- CreateMaze가 생성하고자 하는 미로에 방, 문, 벽을 추가하는 연산을 사용해서 새로운 미로를 만들 수 있는
	객체를 넘겨받는다면 미로를 만드는 방법이나 변경을 이 객체의 상속을 통해서 해결할 수 있습니다. 이는 빌더 패턴의 예입니다.

	- CreateMaze를 이미 만든 다양한 방, 문, 벽 객체로 매개변수화하는 방법도 가능한데, 이미 만든 객체를 복사해서 미로에 추가하면,
	이들 인스턴스를 교체하여 미로의 복합 방법을 변경할 수 있습니다. 이는 프로토타입 패턴의 예입니다.


다섯 개 생성 패턴 중에서 위에 쓰지 않은 싱글턴 패턴이란 것이 있습니다. 이 패턴은 한 게임에 오로지 하나의 미로 객체만 존재할 수 있고
그 게임에서 돌아가는 모든 게임 객체들이 이 미로에 접근이 가능하도록 보장합니다. 전역 변수나 전역 함수에 의존할 필요 없이 이런 일이 가능합니다.
또한 싱글턴 패턴은 기존 코드를 건드리지 않고도 미로를 쉽게 대체하거나 확장할 수 있도록 해 줍니다.


생성 패턴(Creational pattern)
     - 객체 생성에 관련된 패턴
     - 인스턴스를 만드는 절차를 추상화하는 패턴

     - 클래스 생성 패턴
        -> 인스턴스로 만들 클래를 다야하게 만들기 위한 용도로 상속을 사용
     - 객체 생성 패턴
        -> 인스턴스화 작업을 다른 객체에 떠넘김

     - 객체를 생성, 합성하는 방법이나 객체의 표현 방법과 시스템을 분리
     - 시스템이 어떤 구체 클래스를 사용하는지에 대한 정보를 캡슐화
     - 이들 클래스의 인스턴스들이 어떻게 만들고 어떻게 서로 맞붙는지에 대한 부분을 완전히 가려줌

     - 무엇이 생성되고, 누가 이것을 생성하며, 이것이 어떻게 생성되는지, 언제 생성할 것인지 결정하는데 유연성 확보
        -> 객체의 생성과 조합을 캡슐화해 특정 객체가 생성되거나 변경되어도 프로그램 주고에 영향을 크게 받지 않도록 유연성을 제공

생성 패턴 선택의 어려움
    - 프로토타입 패턴과 추상 팩토리 패턴중 무엇을 선택할지 고민해야 할 때
    - 빌더 패턴은 어떤 구성요소를 만들지 구현하는 데에 다른 생성 패턴 중 하나를 사용할수 있음
    - 원형 패턴은 자기 자신의 구현을 위해 컴퓨짓 패턴을 사용하기도 함

생성 패턴을 설명하기 위한 예제
    - 생성 패턴 간에는 매우 밀접한 관련성이 있기 때문에, 이들 간의 공통점과 차이점을 중심으로 다섯 개의 패턴을 공부하겠습니다.
    하나의 예제를 통해 각 패턴의 설명을 진행합니다. 컴퓨터 게임에 넣을 미로를 만드는 문제입니다. 패턴에 따라 미로와 게임이 어떻게 조금씩 다르게 만들어지는지
    잘 보시기 바랍니다. 주어진 예제에서 중요한 상은 미로를 어떻게 만들것인가 입니다. 미로는 방들의 집합이고, 각 방은 옆에 무엇이 있는지 알고 있는데, 방 옆에 있는
    것이 방일 수도 있고, 문일 수도 있고, 벽일 수도 있습니다.


        - 클래스 Room, Door, Wall은 우리가 개발하는 미로를 만드는 데 필요한 구성요소입니다.
*/

#include "MazeGame.h"

int main(int argc, char* argv[])
{
    CMazeGame c_mazeGame;

    c_mazeGame.CreateMaze();

    return 0;
}